using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Windows;
using Microsoft.Toolkit.Mvvm.ComponentModel;
using WahooFitToGarmin_Desktop.Contracts.Services;
using WahooFitToGarmin_Desktop.Helpers;

namespace WahooFitToGarmin_Desktop.ViewModels
{
    public class MainViewModel : ObservableObject
    {
        private readonly IToastNotificationsService _toastNotificationsService;
        private string wahooFolder;
        private string garminLogin;
        private string garminPwd;

        public ObservableCollection<LogEntry> LogEntries { get; set; }

        public MainViewModel(IToastNotificationsService toastNotificationsService)
        {
            _toastNotificationsService = toastNotificationsService;
            LogEntries = new ObservableCollection<LogEntry> { new LogEntry("Starting .......") };
            DumpSettings();

            if (Directory.Exists(wahooFolder))
            {
                var fw = new FileSystemWatcher
                {
                    Filter = "*.fit",
                    Path = wahooFolder,
                    EnableRaisingEvents = true,
                    IncludeSubdirectories = false
                };
                fw.Created += FileIsComing;
            }
            else
            {
                Log("Please select a good directory in settings and restart the application");
            }

        }

        private void FileIsComing(object sender, FileSystemEventArgs e)
        {
            Log($"A new file is coming => {e.Name}");
            _toastNotificationsService.ShowSimpleToastNotification("A new file is coming", e.Name);
        //    var res = Run(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "garmin-uploader", "cli.py"), $"-u {_garminConnectSettingsService.GetGarminConnectUserName()} -p {_garminConnectSettingsService.GetGarminConnectPassword()} {fitFile} -v 1");
        //    Console.WriteLine(res);
        //    Log($" Garmin_uploader execution result ==> {res}");

        //    if (res.Contains("Uploaded activity") || res.Contains("Activity already uploaded"))
        //        System.IO.File.Delete(e.FullPath);

        //    Log("-------------------------------------------------------------------------------");
        }

        private void DumpSettings()
        {
            wahooFolder = App.Current.Properties["WahooDropBoxFolder"].ToString();
            if (string.IsNullOrEmpty(wahooFolder))
                Log("Please select folder to watch for in settings");

            Log($"Wahoo folder to watch for : {wahooFolder}");

            garminLogin = App.Current.Properties["GarminLogin"].ToString();
            garminPwd = App.Current.Properties["GarminPwd"].ToString();
            if (string.IsNullOrEmpty(garminLogin) || string.IsNullOrEmpty(garminPwd))
                Log("Please enter your Garmin login and password in settings");
        }

        private void Log(string message)
        {
            Application.Current.Dispatcher.Invoke(
                () => { LogEntries.Add(new LogEntry(message)); });
        }

        public string Run(string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "python3";
            start.Arguments = $"{cmd} {args}";
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using Process process = Process.Start(start);
            using StreamReader reader = process.StandardOutput;
            string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
            string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")


            return stderr + " " + result;

        }
    }
}
